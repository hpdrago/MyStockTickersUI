import { CrudOperation } from "./crud-operation";
import { ModelObject } from "../../model/base-modelobject";
import { ModelObjectFactory } from "../../model/model-object-factory";
import { BaseCrudComponent } from "./base-crud.component";
import { CrudPanelService } from "./crud-panel.service";
import { OnInit } from "@angular/core";
import { CrudRestService } from "../../service/crud-rest.serivce";
import { ToastsManager } from "ng2-toastr";

/**
 * This is the base class for CRUD enabled tables.
 *
 * Created by mike on 12/8/2016.
 */
export abstract class CrudTableComponent<T extends ModelObject<T>> extends BaseCrudComponent<T> implements OnInit
{
    /**
     * The current rud operation being performed
     */
    protected crudOperation: CrudOperation;
    /**
     * The currently selected model object.  Null if no model objects are selected.
     */
    protected selectedModelObject: T;
    /**
     * The model object that will be displayed in the form for editing.  It's a separate instance
     * than the selectedModelObject so that there are no changes to the selected model object until
     * there is an update.
     */
    protected displayableModelObject: T;

    protected totalRecords: number;

    constructor( protected toaster: ToastsManager,
                 protected modelObjectFactory: ModelObjectFactory<T>,
                 protected crudPanelService: CrudPanelService<T>,
                 protected crudRestService: CrudRestService<T> )
    {
        super( toaster, modelObjectFactory );
    }

    public ngOnInit()
    {
        this.subscribeToCrudPanelEvents();
        this.crudPanelService.handleCloseButtonClicked().subscribe( () => this.onCloseButtonClicked() );
    }

    protected onCloseButtonClicked()
    {
    }

    /**
     * This method will subscribe to events generated by the parent {@code CrudTableComponent}
     * to the injected {@code CrudPanelService}
     */
    protected subscribeToCrudPanelEvents()
    {
        this.crudPanelService.handleModelObjectChanged().subscribe(
            ( modelObject: T ) => this.onModelObjectChanged( modelObject ) );
        this.crudPanelService.handleModelObjectCreated().subscribe(
            ( modelObject: T ) => this.onModelObjectCreated( modelObject ) );
        this.crudPanelService.handleModelObjectDeleted().subscribe(
            ( modelObject: T ) => this.onModelObjectDeleted( modelObject ) );
    }

    /**
     * this method is called when the user clicks on the Save button on the stock form.
     */
    protected onModelObjectChanged( modelObject: T ): void
    {
        this.logger.log( 'onModelObjectChanged' );
        //this.crudOperation = CrudOperation.NONE;
        //this.lazyLoadData( this.lastLoadEvent );
    }

    /**
     * this method is called when the user clicks on the Add button on the stock form.
     */
    protected onModelObjectCreated( modelObject: T ): void
    {
        this.logger.log( 'onModelObjectCreated' );
        this.crudOperation = CrudOperation.NONE;
        //this.getTCompaniesLike( stock.tickerSymbol );
    }

    /**
     * this method is called when the user clicks on the Delete button on the stock form.
     */
    protected onModelObjectDeleted( modelObject: T ): void
    {
        this.logger.log( 'onModelObjectDeleted' );
        this.crudOperation = CrudOperation.NONE;
        //this.lazyLoadData( this.lastLoadEvent );
    }

    /**
     * Determines if the Add button should be disabled
     * @returns {boolean}
     */
    protected isAddButtonDisabled(): boolean
    {
        return false;
    }

    protected addButtonClick()
    {
        this.logger.log( 'addButtonClick' );
        this.crudOperation = CrudOperation.INSERT;
        this.displayableModelObject = this.modelObjectFactory.newModelObject();
        this.crudPanelService.sendCrudOperationChanged( this.crudOperation );
        this.crudPanelService.sendModelObjectChanged( this.displayableModelObject );
    }

    protected showFormToEdit()
    {
        this.crudOperation = CrudOperation.UPDATE;
        this.displayableModelObject = this.selectedModelObject;
    }

    /**
     * this method is called when the user selects a row in the stock table
     * @param event
     */
    protected onRowSelect( event ): void
    {
        var methodName = "onRowSelect";
        this.logger.log( methodName + " " + JSON.stringify( event ) );
        this.selectedModelObject = this.modelObjectFactory.newModelObjectFromEvent( event.data );
        /*
         * Make a clone so that we are making changes to a clone and not the row in the table
         */
        this.displayableModelObject = this.selectedModelObject.clone();
        this.logger.log( methodName + " displayableModelObject" + JSON.stringify( this.displayableModelObject ) );
        this.crudOperation = CrudOperation.UPDATE;
        /*
         * Notify the panel of the changes
         */
        this.crudPanelService.sendCrudOperationChanged( this.crudOperation );
        this.crudPanelService.sendModelObjectChanged( this.displayableModelObject );
    }

    protected onEditComplete( event ): void
    {
        this.logger.log( 'onEditComplete' );
        this.crudRestService.updateModelObject( this.selectedModelObject );
    }

}